const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');

const bot = new Telegraf('8495287734:AAH8ZCbjy_XaoLHS0gsasSDHomiNOdGr_0c');
const DATA_FILE = '/tmp/data.json'; // –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ Render

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
let data = {};
if (fs.existsSync(DATA_FILE)) {
  data = JSON.parse(fs.readFileSync(DATA_FILE));
} else {
  fs.writeFileSync(DATA_FILE, JSON.stringify({}));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—à–∏–Ω
function getCarsList() {
  const keys = Object.keys(data);
  if (keys.length === 0) return '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.';
  return keys.map((car, i) => `${i + 1}. ${car}`).join('\n');
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userState = {};

// –ù–∞—á–∞–ª–æ
bot.start((ctx) => {
  userState[ctx.chat.id] = {};
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º. –ß—Ç–æ –¥–µ–ª–∞–µ–º?',
    Markup.keyboard([
      ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å', 'üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'],
      ['üìÑ –û—Ç—á—ë—Ç', 'üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π']
    ]).resize()
  );
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å', (ctx) => {
  userState[ctx.chat.id] = { step: 'add_car' };
  ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ VIN, –Ω–∞–ø—Ä–∏–º–µ—Ä: Tiguan ‚Ä¢ 123456', 
    Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).resize()
  );
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
bot.hears('üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', (ctx) => {
  if (Object.keys(data).length === 0) {
    ctx.reply('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å.');
    return;
  }
  userState[ctx.chat.id] = { step: 'choose_car_for_expense' };
  ctx.reply('–í—ã–±–µ—Ä–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', Markup.keyboard([...Object.keys(data), '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']).resize());
});

// –°–ª—É—à–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('text', (ctx) => {
  const state = userState[ctx.chat.id] || {};
  const text = ctx.message.text.trim();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞"
  if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' || text === '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞') {
    switch (state.step) {
      case 'add_car':
      case 'choose_car_for_expense':
      case 'choose_person':
      case 'expense_name':
      case 'expense_cost':
        userState[ctx.chat.id] = {};
        ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', 
          Markup.keyboard([
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å', 'üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'],
            ['üìÑ –û—Ç—á—ë—Ç', 'üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π']
          ]).resize()
        );
        return;
      default:
        userState[ctx.chat.id] = {};
        return;
    }
  }

  switch (state.step) {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    case 'add_car':
      if (!data[text]) {
        data[text] = {
          buy: { –ú–∞–∫—Å–∏–º: 0, –ê–Ω–¥—Ä–µ–π: 0 },
          expenses: [],
          salePrice: 0
        };
        saveData();
        ctx.reply(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å "${text}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
      } else {
        ctx.reply('–¢–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –µ—Å—Ç—å.');
      }
      userState[ctx.chat.id] = {};
      break;

    // –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    case 'choose_car_for_expense':
      if (!data[text]) {
        ctx.reply('–¢–∞–∫–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.');
        return;
      }
      state.step = 'choose_person';
      state.car = text;
      ctx.reply('–ö—Ç–æ –≤–Ω–æ—Å–∏—Ç —Ä–∞—Å—Ö–æ–¥?', Markup.keyboard([['–ú–∞–∫—Å–∏–º'], ['–ê–Ω–¥—Ä–µ–π'], ['‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞']]).resize());
      break;

    // –í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞
    case 'choose_person':
      if (text !== '–ú–∞–∫—Å–∏–º' && text !== '–ê–Ω–¥—Ä–µ–π') return;
      state.step = 'expense_name';
      state.person = text;
      ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–µ–º–æ–Ω—Ç, –º–æ–π–∫–∞ –∏ —Ç.–¥.)', 
        Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).resize()
      );
      break;

    // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–∞
    case 'expense_name':
      state.step = 'expense_cost';
      state.expenseName = text;
      ctx.reply(`–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è "${text}"`, Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).resize());
      break;

    // –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞
    case 'expense_cost':
      const cost = parseFloat(text);
      if (isNaN(cost)) {
        ctx.reply('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!');
        return;
      }
      data[state.car].expenses.push({
        person: state.person,
        expenseName: state.expenseName,
        cost
      });
      saveData();
      ctx.reply(`–†–∞—Å—Ö–æ–¥ "${state.expenseName}" –Ω–∞ —Å—É–º–º—É ${cost}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç ${state.person}.`);
      userState[ctx.chat.id] = {};
      break;

    default:
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.');
      break;
  }
});

// –û—Ç—á—ë—Ç
bot.hears('üìÑ –û—Ç—á—ë—Ç', (ctx) => {
  if (Object.keys(data).length === 0) {
    ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
    return;
  }

  let text = '';
  for (const [car, info] of Object.entries(data)) {
    const totalByMax = info.expenses
      .filter(e => e.person === '–ú–∞–∫—Å–∏–º')
      .reduce((sum, e) => sum + e.cost, 0);
    const totalByAnd = info.expenses
      .filter(e => e.person === '–ê–Ω–¥—Ä–µ–π')
      .reduce((sum, e) => sum + e.cost, 0);
    const total = totalByMax + totalByAnd;

    text += `üöó ${car}\n`;
    text += `–ú–∞–∫—Å–∏–º: ${totalByMax}‚ÇΩ\n–ê–Ω–¥—Ä–µ–π: ${totalByAnd}‚ÇΩ\n–í—Å–µ–≥–æ: ${total}‚ÇΩ\n\n`;
  }

  ctx.reply(text);
});

// –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
bot.hears('üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', (ctx) => {
  ctx.reply(getCarsList());
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ long polling (–¥–ª—è Background Worker –Ω–∞ Render)
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ long polling (Render Worker)');
});
